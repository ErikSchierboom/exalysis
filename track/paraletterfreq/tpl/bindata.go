// Code generated by go-bindata. DO NOT EDIT.
// sources:
// buffer-size-len.md (498B)
// combine-maps-while-waiting.md (201B)
// concurrency-not-faster.md (1.605kB)
// for-range-novars.md (284B)
// goroutine-leak.md (391B)
// mutex.md (824B)
// select-not-needed.md (185B)
// waitgroup-add-one.md (201B)
// waitgroup-not-needed.md (96B)
// waitgroup-range-chan.md (292B)
// waitgroup.md (264B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bufferSizeLenMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\x41\xae\xd4\x40\x0c\x44\xf7\x9c\xa2\x76\x80\x34\x8c\xe0\x16\x1c\x00\x0e\xe0\xa4\x2b\x93\x86\x8e\x1d\xd9\xce\xe4\x0f\xa7\x47\x9d\x68\xa4\x2c\xbb\x16\xf5\x5e\xb9\xbf\xe1\x77\x54\x7d\x40\x30\x6c\xd3\x44\x67\xc1\x38\x8b\x2a\x1b\x6a\x40\xf0\x30\x2b\xa8\x85\x72\x83\x68\xc1\x5e\x5b\xc3\xea\x7c\x52\x13\x0f\x73\xdb\xb2\x2a\x03\x93\xdb\x82\xa1\xd9\xf8\xb7\x97\xed\x33\x15\x41\x2d\xfd\x91\x86\x9c\xf9\x6e\xbd\xe3\xa7\xed\x7c\xd2\x6f\x47\x7a\x42\x51\x8c\xa1\x9f\x13\x4a\x16\x48\x60\x11\x7d\x21\x9a\x65\xf4\x57\xce\x74\x42\x9c\x17\xe2\x0d\x03\x47\xd9\x82\xd8\x79\x5a\x0d\x84\x0c\x8d\x9d\x17\x29\x9e\x70\x8e\xac\xcf\xae\x70\xd8\x5d\x24\xb0\xcf\xb5\x11\x61\xcb\xb5\xf2\x20\x44\xf6\xae\x8b\x7b\xcd\x3b\x7e\xcd\x04\x3f\x64\x4c\xd8\x9a\x75\x91\xf6\xf6\x8e\xfa\x8f\x28\x5c\xa9\x25\x60\x7a\x30\x9c\x4d\xb2\x3e\x89\x58\xfb\x1a\x9b\x8e\xb4\x37\xd2\xe3\x38\xe2\x29\x46\x8f\xf3\xa6\x2f\xdb\x30\x8a\xa2\x8f\x49\xaf\xd2\x8e\x94\xee\xe6\x5d\xa0\x30\xe9\x4b\x55\x22\xe7\xda\x77\x6f\x89\xc9\x1c\x8b\x45\x62\xdd\x7c\xb5\xe8\xee\x88\x45\x5a\xc3\x54\x3f\x58\x4e\xaf\x2f\x21\x2f\xfc\xf8\xfe\xb5\x7f\xe4\x9f\x2d\x12\x53\x55\xde\x3f\xfd\x0f\x00\x00\xff\xff\xe5\x68\x7c\x79\xf2\x01\x00\x00")

func bufferSizeLenMdBytes() ([]byte, error) {
	return bindataRead(
		_bufferSizeLenMd,
		"buffer-size-len.md",
	)
}

func bufferSizeLenMd() (*asset, error) {
	bytes, err := bufferSizeLenMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "buffer-size-len.md", size: 498, mode: os.FileMode(420), modTime: time.Unix(1544959350, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x8e, 0xe6, 0x5e, 0xdf, 0x5e, 0x53, 0x95, 0xbb, 0xd8, 0x23, 0xac, 0x30, 0x4b, 0x8b, 0xb, 0x5d, 0xbf, 0xb5, 0x78, 0xc3, 0x19, 0x17, 0x6e, 0xc3, 0xc0, 0x79, 0x7b, 0xf, 0x5a, 0xfb, 0x58}}
	return a, nil
}

var _combineMapsWhileWaitingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x41\x0e\x82\x40\x0c\x85\xe1\xbd\xa7\x78\x4b\x4d\x94\x7b\x70\x8c\x32\x74\x60\xc2\xd0\x9a\xb6\x83\xf1\xf6\x66\x90\x55\x37\xfd\xf3\xbd\x17\xc6\x40\x55\xdd\x1c\xb5\x6c\x8c\xaf\x36\x7c\xa8\x04\x9a\x44\xa9\xa0\x5a\x61\xec\xad\x86\x63\xa5\x83\x31\x31\x0b\x8c\x13\x97\x83\x67\x64\xd3\x1d\xb1\x32\x16\x35\x6d\x51\x84\x1d\x13\x67\x35\x86\x07\x59\x14\x59\x10\x8a\x9d\x6d\xe1\xfe\xb7\x0f\x18\x05\x99\x52\x3c\x4f\x29\x91\xe0\x4e\x32\xc3\x57\x6d\x75\x7e\xfc\x2b\xbc\x4d\x13\xbb\xf7\x9a\x1c\xae\x2a\xfd\xf6\xe0\x92\x4f\x33\x17\xf3\xb8\xd6\x0d\xb7\x5f\x00\x00\x00\xff\xff\x4b\x7e\x51\xaa\xc9\x00\x00\x00")

func combineMapsWhileWaitingMdBytes() ([]byte, error) {
	return bindataRead(
		_combineMapsWhileWaitingMd,
		"combine-maps-while-waiting.md",
	)
}

func combineMapsWhileWaitingMd() (*asset, error) {
	bytes, err := combineMapsWhileWaitingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combine-maps-while-waiting.md", size: 201, mode: os.FileMode(420), modTime: time.Unix(1544964277, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0xdd, 0x64, 0xca, 0xb6, 0x2c, 0x5, 0x35, 0xba, 0x60, 0x53, 0xd9, 0x5c, 0x87, 0x1b, 0x29, 0xe0, 0x23, 0x2c, 0x1d, 0xaf, 0x4c, 0x9b, 0x30, 0x6b, 0x39, 0x68, 0x2f, 0x1c, 0xfd, 0x96, 0x53}}
	return a, nil
}

var _concurrencyNotFasterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x4d\x6f\xe4\x36\x0f\xbe\xfb\x57\x3c\xef\x69\x77\x07\xb3\x0e\xf0\x1e\x5a\x60\x83\x22\x68\x7b\x58\x04\xbd\x04\x6d\x8a\x45\x5b\xf4\x40\xdb\xf4\x48\x1d\x59\x74\x45\xca\x8e\xff\x7d\x21\x79\xf2\xd5\x4d\x4f\x33\x90\x28\x92\xcf\x07\xe9\xe6\xe3\xc7\x8f\xcd\xe1\x70\xf8\x51\x62\x9f\x53\xe2\xd8\x6f\x9f\xf0\xc5\x91\xbd\x53\x98\x63\xcc\xe2\xa3\xdd\x1c\x0e\x87\xa6\xb9\x1d\xb1\x49\x7e\xb7\x30\x3a\x8e\xbd\x9b\x28\x9d\x79\x28\x47\x09\x2a\x21\x9b\x97\x08\x13\x98\xf3\x0a\x7e\xe0\xd4\x7b\xe5\x63\xb9\xc7\xe4\x4f\xce\xd0\x31\x26\x1f\x86\xb0\x41\x73\x9a\x93\x57\x1e\x60\x8e\xac\xd6\xe9\x1f\xeb\x1b\x16\x4e\x5a\x72\x79\x8d\xef\x0c\x53\xee\x1d\x46\x52\xe3\x54\xa2\x63\x8d\x56\xfe\x3b\x73\x34\x4f\x01\x12\xb9\xc5\x17\xb7\x21\x8a\xdd\x34\xcd\xfd\x63\xcf\x90\xf1\x75\x2b\xf0\xba\x97\xcb\xea\xe3\xe9\xb9\x60\xbf\x61\x10\xd6\xf2\x1e\x14\x56\xda\x14\x7e\x9a\x93\x2c\x8c\x99\xd3\x28\x69\xa2\xd8\x73\x8b\x5f\x64\x62\xf3\x13\x2b\xbc\x81\x7a\xcb\x14\xc2\x86\x89\xce\x5c\xf2\xfa\x78\x52\xac\x92\x94\xff\x87\xdb\xf8\x16\x09\x3d\x45\x9c\xf8\x3f\xd1\x9a\x20\xe5\x08\xea\x24\x1b\x48\x2b\xe4\xf2\xfb\x35\xdc\x6b\x4c\xb4\x75\x0c\x0d\x85\xd6\xb0\x5d\xd8\x69\xf1\x43\xb6\x57\xb0\x76\x02\xc7\xc4\x7c\x8d\x95\xe1\x68\xe1\x52\x66\x10\x10\x46\xf2\x09\x9d\xaf\x34\xad\x92\xce\xe5\x42\xd2\x89\x62\x61\xea\x5f\x2d\x9e\x24\x49\x36\x1f\x59\x41\x71\xc0\x4c\xba\xb7\x35\x90\x51\x3d\x49\xac\x39\x98\x82\x92\xe4\x38\xa0\x63\x5b\x99\xab\x52\x53\x8b\xef\x83\xca\x11\xbd\xe4\x68\x85\xf7\xc0\x56\xa4\x1c\x53\xc5\x54\xbb\x04\x21\x71\x20\xf3\x0b\x5f\xd0\xc0\x48\xcf\xd7\x98\x38\x9d\xca\x9b\x89\x66\x2d\x71\x1a\x64\x2d\x42\x14\x34\x94\xf8\x59\x85\x99\x12\x85\xc0\xc1\x57\x69\x25\x86\x0d\x04\x9d\x28\x84\x72\x75\xf1\x02\xef\x40\x1d\x27\x6e\x9b\xe6\xd7\xaf\x5c\xe0\x15\x93\x68\xf1\x69\xe4\xd1\xf7\x85\xed\xd5\x71\x7c\x12\xaf\x4b\x4c\x67\xe4\x19\x54\xdb\x83\x8f\x26\x98\x72\x30\x3f\x07\x46\xef\x72\x3c\x5f\x1c\x56\xa3\x19\x73\x92\x9e\xb5\xd8\xdc\xc7\x81\x67\x8e\x03\x47\x0b\xdb\xb1\x72\x56\x53\xd7\x09\xdb\xa3\x4a\x8f\x8f\x78\x2b\xff\x25\x1f\x3f\x73\xbb\x8b\x69\x22\xe0\x87\x99\xa3\xfa\x85\x5b\xfc\xc4\x3c\xef\x5e\xf3\x11\x93\x7f\x4c\x5b\xc6\x34\x71\x75\xe5\xb9\xe4\xdb\x4d\xb5\x3a\x36\xc7\x09\xf4\x52\x5b\x9a\xe7\x24\xd4\xbb\xa2\xbf\x4a\x58\x6a\x38\x4e\x7e\xe1\x58\x3a\xeb\x02\x4f\x17\x8f\x2b\x47\x65\x48\x2a\x83\xd2\x36\xcd\xdb\x66\xfb\x2b\x17\xd7\xd6\x72\x3a\x33\x0f\x2d\x6e\xcb\x26\xa1\xa0\x72\x39\x1e\x98\x42\x29\xb2\x7a\x73\xcf\xec\x5d\x06\x88\x0c\x12\x7b\xbe\xc6\x28\x09\xfc\x40\xd3\x1c\xf8\x08\x47\x71\xa8\x6f\xaa\x67\xd4\xb4\x34\x4b\x58\xb9\x83\x72\x5a\x8a\xf5\xef\x76\x12\x5f\x05\x3d\xa3\x2c\x73\xca\x14\x2f\xea\xbc\x1c\xc6\x85\xd3\x06\xe7\x4f\x0e\xe6\x92\xe4\x93\x9b\xb3\xe1\xfd\x53\x8a\x99\x13\x94\x7b\x89\xc3\x87\xb2\x64\x38\xf2\xc2\xe9\x91\xde\xb7\x91\xa8\x2f\x7f\x29\xb2\x64\x7d\xea\xe5\xf8\x9a\xf4\xa7\x75\xe9\xb5\x92\x4c\x5d\xd8\x76\x83\xd2\x56\xb0\x9d\xa4\x6d\x9a\x7b\x41\x60\x4a\x11\x93\x14\xab\x57\xf2\x5e\x11\x1e\xf1\x59\xaa\x95\x9c\xac\xe5\x55\x2e\x3b\xce\xc0\xe3\xc8\xfd\x3e\x4b\x47\xac\x64\xbd\xc3\xcf\xd2\xe1\xce\x9f\xb9\xec\x74\x0a\x67\x48\xc4\x1f\x9f\x05\x2f\x76\x3e\xee\xa8\x8c\x65\xd4\x3f\xdf\x3b\xb3\x59\x3f\x5d\x5d\xad\xeb\xda\x6e\x92\x2d\x77\xdc\xf6\x32\x5d\xd5\x54\x37\xcb\x77\xe3\x37\xe7\x61\xfe\xff\xb7\xf7\xbf\xfd\xae\x1f\xda\xa6\x7e\x3f\xfe\x09\x00\x00\xff\xff\x7e\x04\x52\x10\x45\x06\x00\x00")

func concurrencyNotFasterMdBytes() ([]byte, error) {
	return bindataRead(
		_concurrencyNotFasterMd,
		"concurrency-not-faster.md",
	)
}

func concurrencyNotFasterMd() (*asset, error) {
	bytes, err := concurrencyNotFasterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "concurrency-not-faster.md", size: 1605, mode: os.FileMode(420), modTime: time.Unix(1544960139, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xe9, 0x4c, 0xae, 0x6c, 0x2e, 0xcb, 0xb5, 0x5e, 0x17, 0xcd, 0xe2, 0x50, 0x75, 0xc, 0xb9, 0xda, 0xa8, 0x54, 0x61, 0x60, 0xa8, 0xfe, 0x0, 0x82, 0x6f, 0x5, 0xc0, 0x73, 0x27, 0x37, 0xec}}
	return a, nil
}

var _forRangeNovarsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x41\x4e\x85\x40\x10\x44\xf7\x9e\xa2\x96\x9a\xe0\x1c\xc2\x9d\x47\x70\xc7\xc0\x2f\x98\x51\xe8\x26\x3d\x3d\x02\x31\xde\xdd\x30\xfe\xbf\xac\xd4\x4b\xea\xd5\x2b\xde\x4e\x78\x22\xf6\x78\x76\x88\x28\x49\xcd\x69\x57\x84\x2b\x76\xcb\x4e\x9c\x5a\x0d\x2b\x6d\xce\x32\x63\x51\xdd\x90\x0b\x3e\x6b\x71\xf4\x93\x1a\x2c\xca\x4c\x38\x0f\x2f\xf8\x09\x21\xfc\xf6\x01\x1f\x5a\xb1\x99\x0e\x71\x58\x4e\x7c\x89\xee\xf0\x14\x1d\x7d\x63\x7b\x18\xbd\x9a\x14\xd4\xed\x5a\xf1\x5d\xf1\x1d\x97\xca\x82\xe7\x2c\x37\x1e\x88\x72\x03\x17\xae\x14\x7f\xe9\x5a\x3a\xb5\x62\x8c\x82\x3c\x8b\x1a\xc1\xec\x89\x06\x9d\x2e\xf9\x35\xe0\x7d\x6a\xc4\xbd\x1d\xd4\xd3\xa3\xeb\x10\x0b\x12\x8d\x5d\x23\x66\x3a\xe2\xff\x89\x66\xc4\x83\x63\x75\x16\xa8\x8c\xc4\x46\x7b\xec\x86\xa7\xbf\x00\x00\x00\xff\xff\x0b\x66\xf3\x8f\x1c\x01\x00\x00")

func forRangeNovarsMdBytes() ([]byte, error) {
	return bindataRead(
		_forRangeNovarsMd,
		"for-range-novars.md",
	)
}

func forRangeNovarsMd() (*asset, error) {
	bytes, err := forRangeNovarsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "for-range-novars.md", size: 284, mode: os.FileMode(420), modTime: time.Unix(1544960223, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xcb, 0x5b, 0x81, 0x98, 0xe0, 0x88, 0x48, 0xd2, 0x73, 0x2, 0xa, 0x53, 0xfc, 0xc3, 0x4a, 0x36, 0x7d, 0x7b, 0x3f, 0x7d, 0x4b, 0x6b, 0x90, 0xad, 0xa6, 0xf3, 0x9, 0x76, 0x90, 0x55, 0xc8}}
	return a, nil
}

var _goroutineLeakMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3d\x4e\x03\x51\x0c\x84\x7b\x4e\x31\x1d\x0d\xc9\x05\xa8\xb8\x03\x0d\x55\xe4\xec\x73\xde\xb3\xf2\xd6\x46\xfe\x61\x95\xdb\xa3\x6c\x8a\x40\x37\x96\x6c\xcf\x37\x73\xc0\x07\xba\x59\x83\xd7\x64\xd8\x05\x39\x6a\x3d\x63\x93\x1c\xe8\xe6\x56\x29\xca\x01\x09\xe4\xa0\xc4\x36\x58\xf9\x87\x1d\x37\x2b\x44\x92\x27\x4c\xf9\xed\x31\x0e\xab\xd9\x70\x55\xdb\x30\x6c\x83\xe4\x6b\xa0\x9b\x68\x47\x1a\x2e\xa2\x12\xe3\x88\x2f\x2b\x7f\x7e\xc6\x60\x67\x0c\x0a\xa8\x21\xd9\x57\x51\x4a\x31\xc5\x62\xda\x64\x57\xa4\x0d\x61\xd8\x64\x4e\x78\x29\x2e\xe6\x3b\x81\x28\x72\x30\xce\xb4\x5c\xbb\x5b\x69\x3b\xe2\x73\xc8\x8e\x4a\x08\x3b\x2c\x34\x27\x37\x9c\x9e\x5e\x93\xe9\x7a\x7a\x07\x61\x9a\xf6\x83\x97\xea\x9d\xed\xdb\xad\x3b\xad\x8f\xc8\x84\xff\xeb\x0f\xdb\xee\xd4\x8a\xe6\xbc\x81\x96\xa5\xd6\x9a\x94\x8c\xd5\x9c\x77\xb8\x5d\x54\xf0\xe4\x88\xbf\x9d\x95\xa6\x4c\x48\xde\xa9\x03\x56\x79\xaf\xd7\x39\xac\x7c\xe1\xd8\x4f\x17\xa7\x18\x1c\xc7\x97\xdf\x00\x00\x00\xff\xff\xd7\xb6\x24\x9a\x87\x01\x00\x00")

func goroutineLeakMdBytes() ([]byte, error) {
	return bindataRead(
		_goroutineLeakMd,
		"goroutine-leak.md",
	)
}

func goroutineLeakMd() (*asset, error) {
	bytes, err := goroutineLeakMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "goroutine-leak.md", size: 391, mode: os.FileMode(420), modTime: time.Unix(1544960359, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0x5b, 0xf8, 0x66, 0x29, 0xaf, 0x2c, 0xef, 0xf1, 0x4, 0xe1, 0xbe, 0x32, 0x6b, 0x73, 0x81, 0x81, 0x2d, 0x14, 0xf5, 0xf6, 0xa0, 0xc6, 0x77, 0x84, 0xd6, 0xe7, 0xd2, 0x18, 0x6e, 0x3a, 0x13}}
	return a, nil
}

var _mutexMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\xc1\x6e\xdb\x30\x10\x44\xef\xf9\x8a\x69\x2e\x6e\x01\xc5\x3f\x90\x53\xd1\x02\x45\xee\xbd\xf4\xb8\xa6\xc6\x16\x51\x69\x57\xe1\x2e\xed\xa8\x5f\x5f\x90\x76\x53\x23\x47\x42\x43\xce\x9b\x19\x3d\xe1\x97\x55\x48\x21\xaa\x67\x3d\x41\xb0\xd4\xe0\x1b\xc2\xe0\x9b\xa6\xa9\x98\xe6\x3f\xc4\x66\xb5\x60\x91\x15\x97\x92\x83\xbe\xc7\xd7\x9b\xee\x92\xe7\x19\xb3\x79\x97\x60\x31\x0f\xd8\x11\x31\x11\x07\x2a\x8f\x39\xbc\x9d\x93\x69\xaa\xa5\x50\xd3\x36\xe0\xc0\x24\xd5\x89\x1c\x38\x5a\x49\x74\xc8\x3c\xf7\x2b\x27\x2b\x56\x23\x2b\xbd\xf9\xbf\x56\x56\xa2\xae\xb8\x48\x8e\xc6\x16\x06\x6a\xb0\x74\x6d\x2a\x39\x72\x92\x19\xce\x14\xd9\xf4\x6a\x33\x12\x6b\xb1\x60\x0a\x8e\x38\x6c\x5d\xd9\x41\xf7\xf8\x39\xb1\x70\xe7\x50\xc3\x6a\x59\xe3\x16\xf8\x1d\x2d\xee\xed\xf3\xb1\xe5\xd9\x95\xc6\x74\xb3\xee\xac\xed\xc1\xe5\xca\x6b\xe0\x1b\x53\x0d\xc2\xf9\x5a\xa9\x91\x65\x9e\xb7\x4f\x78\x51\x0f\xca\x38\x20\xca\xf6\x5e\x6a\x9a\x44\x95\xfd\xd6\x2a\xee\x9d\xab\xd0\xeb\x1c\x8e\x83\xa4\xdf\x38\x16\x5b\x3e\x74\xb0\xc7\xb7\xeb\x2d\xef\xfb\x64\x6d\x01\x34\xe6\xed\xbe\xce\x27\x97\x23\x07\xb8\xf5\xfe\x93\x28\x9c\x3a\x42\x74\x44\x61\x62\x3e\x13\xa6\x77\x00\x97\x1c\x93\xd5\x80\x92\xe3\x87\xbd\xd7\xc2\x73\xab\x61\x94\x10\x14\x49\xf4\xfd\xc3\xc3\xe7\x7b\x06\xdd\x45\x67\x14\xf5\x4b\x9b\xc1\xc0\x33\xcb\x16\x53\xd6\xd3\x33\xdc\x16\x46\x5e\xe8\x1d\x65\xb4\xee\x71\x7d\xb8\x2f\x72\x5f\xb5\xa4\x44\xef\x2b\x0b\x5a\x45\x33\xb1\x66\x26\xb6\x15\x7d\x92\xc2\x11\x0b\x17\x2b\xdb\xd0\xa3\xfc\xa3\xcc\x8e\x3c\x52\xe6\x36\x06\x62\xca\xbe\xc7\x8b\xe2\x44\x65\x91\x79\x40\x8b\x76\x9a\x06\x88\x43\xf0\xa3\x1b\x9f\x59\x0e\x28\x5c\xb2\x8e\x8e\xea\x03\x1e\xbf\x5b\x8b\x91\x6c\x59\xaa\xe6\x24\xc1\xf6\x9f\x34\xcf\x56\xc7\xd5\xf4\xf9\xca\x70\x3b\xb5\xef\xff\xe5\x59\x4f\x8f\xfb\x2f\x0f\x7f\x03\x00\x00\xff\xff\x9e\xcc\xb1\xf4\x38\x03\x00\x00")

func mutexMdBytes() ([]byte, error) {
	return bindataRead(
		_mutexMd,
		"mutex.md",
	)
}

func mutexMd() (*asset, error) {
	bytes, err := mutexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutex.md", size: 824, mode: os.FileMode(420), modTime: time.Unix(1544960593, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x3, 0xb4, 0xd, 0x43, 0x33, 0xda, 0xaf, 0xac, 0xc, 0x38, 0x3d, 0xbf, 0x6b, 0xc5, 0x80, 0xb4, 0xfa, 0x7f, 0xa9, 0xbf, 0x35, 0x98, 0x9a, 0xab, 0xb6, 0x8e, 0x63, 0xe2, 0xb, 0x4b, 0xb1}}
	return a, nil
}

var _selectNotNeededMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\xc1\x6d\xc3\x30\x0c\x05\xd0\x7b\xa7\xf8\x03\xb4\xde\xa1\x63\xf4\x66\x5a\xfe\x8d\x88\x10\xa4\x41\x4a\x36\xbc\x7d\x90\x53\x06\x78\xc0\xfb\xc1\x5f\x4c\x48\x12\xb3\xd4\x1f\x10\xac\x45\x63\x1b\x2b\x2e\x1d\x1d\xe1\x76\x23\x9c\x68\x52\x84\xf8\x0e\x0f\xc4\xe8\x4c\xb4\xd8\x09\xf5\x37\xf9\x8f\x5c\x61\x11\xc7\x82\xdf\x82\xa0\x75\x71\xa7\x21\xd9\xa8\x27\x11\x07\x53\x86\x86\xe3\x52\x33\x6c\x16\xed\x89\xe9\x43\x0d\x82\x53\x6c\x12\x5a\x90\x53\xd4\x64\x33\x7e\x63\x74\x7e\x22\x5a\x98\xee\x6c\xac\x92\xbc\xd1\x99\x5c\xbe\x5e\x01\x00\x00\xff\xff\xb0\x1b\xff\x74\xb9\x00\x00\x00")

func selectNotNeededMdBytes() ([]byte, error) {
	return bindataRead(
		_selectNotNeededMd,
		"select-not-needed.md",
	)
}

func selectNotNeededMd() (*asset, error) {
	bytes, err := selectNotNeededMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "select-not-needed.md", size: 185, mode: os.FileMode(420), modTime: time.Unix(1544960758, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0xb1, 0xbb, 0x5f, 0x52, 0x4f, 0x8a, 0x3e, 0x5e, 0x99, 0xd8, 0xe9, 0x4e, 0xe1, 0x51, 0xd8, 0x25, 0xda, 0x4e, 0xa5, 0xb1, 0x19, 0x9, 0xb4, 0x77, 0xc1, 0x1a, 0x10, 0x3e, 0x13, 0x24, 0xd3}}
	return a, nil
}

var _waitgroupAddOneMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x52\x03\x31\x0c\x46\xe1\x9e\x53\xfc\x65\x32\x03\x7b\x00\xba\x54\x0c\x27\x60\xe8\xac\xc5\x8a\x2d\xf0\x4a\x19\x59\xc6\xf8\xf6\x4c\x68\xe8\xbf\xf7\x9e\xf0\x6e\x03\xe4\x8c\xd1\x45\x0b\x08\xa9\x2f\xfd\xd8\xde\x48\xe2\xc5\x6d\xdc\x12\x66\x65\x67\x2c\x1b\x48\x97\x9c\x13\x4c\x19\xa2\xe0\x6f\xf6\x85\x66\x76\x83\x04\x3b\x85\x98\x6e\x78\xbd\xfe\xc9\x2f\xb5\x89\xab\xdb\x81\xa8\x8c\x9d\x8b\xa8\xde\xf7\xd5\x26\x0e\xd2\xf5\x9f\xf4\xbb\x70\xc6\x94\xd6\xb0\xf3\x23\x3e\x47\x0f\x50\xce\x88\x4a\x01\x1d\xc7\xce\x0e\x97\x52\x03\x34\x69\x3d\x23\xcd\xb2\x5d\x72\x3e\x35\xd6\x53\xf0\x4f\xf4\xf3\x39\x6d\x0f\xbf\x01\x00\x00\xff\xff\xa1\x8d\xcf\x34\xc9\x00\x00\x00")

func waitgroupAddOneMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupAddOneMd,
		"waitgroup-add-one.md",
	)
}

func waitgroupAddOneMd() (*asset, error) {
	bytes, err := waitgroupAddOneMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup-add-one.md", size: 201, mode: os.FileMode(420), modTime: time.Unix(1544959002, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x1f, 0x9, 0xca, 0x3b, 0x18, 0xaf, 0xd9, 0x8f, 0xa4, 0xe6, 0x1f, 0x1a, 0xa2, 0x6, 0x2, 0xae, 0xeb, 0xd2, 0xec, 0xd1, 0x7d, 0x2e, 0x92, 0x76, 0xd6, 0x6, 0x29, 0xaf, 0xd0, 0x8c, 0xe3}}
	return a, nil
}

var _waitgroupNotNeededMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x02\x31\x0c\x05\xd0\x9e\x29\xfe\x02\xdc\x0a\x14\x14\x8c\x80\xe8\xce\x4a\xbe\x88\xc5\x61\x23\xc7\x46\xca\xf6\xf7\xae\x78\x79\x41\x82\xa8\xa9\xf6\x86\x60\x9f\xcb\xda\xf6\x14\xcd\x47\x78\xfd\x76\x0c\x06\x91\x43\x12\x3a\x61\x9e\x08\xca\x71\x2c\x18\xd9\xd9\x37\xdc\xc5\xb0\xbc\xd0\x06\xdb\x07\x62\x1d\xc1\xaf\xff\x09\xcd\xdb\xe5\x0c\x00\x00\xff\xff\x52\x3e\xee\xe4\x60\x00\x00\x00")

func waitgroupNotNeededMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupNotNeededMd,
		"waitgroup-not-needed.md",
	)
}

func waitgroupNotNeededMd() (*asset, error) {
	bytes, err := waitgroupNotNeededMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup-not-needed.md", size: 96, mode: os.FileMode(420), modTime: time.Unix(1544960802, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x1a, 0xf8, 0xca, 0x95, 0x2a, 0x36, 0xb5, 0x8c, 0x92, 0x3c, 0x1f, 0xe2, 0x4f, 0xf9, 0x33, 0xa5, 0x7e, 0x9f, 0x4, 0x50, 0xb2, 0x54, 0xd3, 0x5e, 0xc4, 0x15, 0xaa, 0x9c, 0x45, 0x9f, 0xab}}
	return a, nil
}

var _waitgroupRangeChanMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x4e\xc4\x30\x0c\x44\xef\x7c\xc5\xdc\xb8\x2c\xfd\x0d\xc4\x1d\x09\x71\xab\x69\x67\x37\x11\x5e\xa7\x8a\x9d\x2d\xfd\x7b\x64\xb4\x20\x2e\x51\x34\xf6\x3c\xbf\x27\xbc\xb7\x01\xe9\xc4\xf0\x6a\x17\x08\x66\x3f\x6c\x99\xde\xa4\xc6\x73\x6f\x63\x9b\x51\xd8\x89\x28\x12\xa8\x0e\x6b\x81\x4e\x51\x3d\x60\xe4\xca\x75\xc2\x8b\x79\x50\x56\xb4\x33\x8a\xdc\x12\x12\x85\xe8\x5c\x58\x6f\xec\xe8\x62\x17\xa2\xe5\x37\xf3\xa5\x88\x19\xf5\x84\xbd\xd4\xa5\x60\xaf\xaa\xf8\x24\xb7\x7b\x21\xeb\xc3\xa2\xea\xff\xe5\x3c\xbc\x68\x73\xae\x27\x0c\x27\xe6\x73\xfb\xe5\x06\xbf\xc2\xe7\x09\xaf\xe9\xb7\xcb\x81\xa3\x8d\x47\x55\x68\x6b\xdb\x1d\x94\xc9\xed\x4f\x68\xfd\x01\xbb\x5c\x09\x1b\xd7\x0f\xf6\xf4\xee\xf4\xa1\xe1\x10\xcf\x69\x27\xf6\x7c\xaa\x6d\x23\x7c\x7a\xf8\x0e\x00\x00\xff\xff\xbf\x93\x36\x06\x24\x01\x00\x00")

func waitgroupRangeChanMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupRangeChanMd,
		"waitgroup-range-chan.md",
	)
}

func waitgroupRangeChanMd() (*asset, error) {
	bytes, err := waitgroupRangeChanMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup-range-chan.md", size: 292, mode: os.FileMode(420), modTime: time.Unix(1544960883, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x69, 0xe0, 0x6a, 0x5c, 0x36, 0x4f, 0xf5, 0xac, 0x75, 0x7b, 0xa, 0x9, 0x4, 0x39, 0xc0, 0x8, 0xc6, 0x78, 0xc6, 0x43, 0xba, 0x4c, 0x75, 0xc5, 0xa9, 0x2a, 0xd2, 0xdf, 0x14, 0x8, 0xc2}}
	return a, nil
}

var _waitgroupMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x31\x4e\xc4\x30\x10\x45\x7b\x4e\xf1\x3b\x1a\xf0\x01\xb8\x00\x3d\xcd\x8a\x2e\xc6\xfe\x1b\x8f\x88\x67\x56\x13\x3b\x4b\x6e\x8f\x62\x11\xb1\xed\xd3\xbc\xf9\xef\x15\x9f\xd6\x11\x9d\xe8\xab\xe8\x8c\x88\x69\xdd\x35\x85\x4b\x94\xf6\xee\xd6\x6f\x13\x0a\x9d\x61\x9c\x25\xeb\x4b\x46\xb5\x8d\x68\x85\x70\x26\xca\x76\x58\xab\x64\xc2\xae\x83\xa6\x12\x55\xb9\x40\xb4\xd9\x00\x35\x8a\x62\x36\xb7\xde\x44\x89\xa8\x19\x33\x1b\x5c\xf2\xa9\x4c\xff\x6b\x01\x1f\xac\xac\x5f\xf4\x37\xec\xd6\xf1\xad\x76\x47\xb1\x3b\x6a\xd4\xfd\x20\xcf\x4e\xf0\xe7\xc6\xd4\x8e\xe1\x66\x7f\x15\xc4\xd5\xad\x3e\x06\x04\x5c\x0a\x75\x28\xdb\xd9\xca\x7c\x5c\x54\xc4\x65\x79\x39\x9f\x65\x53\x86\xa7\xdf\x00\x00\x00\xff\xff\x6c\xba\x88\x55\x08\x01\x00\x00")

func waitgroupMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupMd,
		"waitgroup.md",
	)
}

func waitgroupMd() (*asset, error) {
	bytes, err := waitgroupMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup.md", size: 264, mode: os.FileMode(420), modTime: time.Unix(1544960917, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x53, 0xad, 0xd4, 0x14, 0xfe, 0x56, 0xc0, 0x30, 0xa6, 0x3f, 0xb2, 0xcc, 0x86, 0xeb, 0xee, 0x12, 0x33, 0x92, 0x38, 0xf7, 0x54, 0x59, 0xe7, 0xba, 0x13, 0x81, 0xb0, 0x27, 0x8a, 0x5e, 0xc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"buffer-size-len.md": bufferSizeLenMd,

	"combine-maps-while-waiting.md": combineMapsWhileWaitingMd,

	"concurrency-not-faster.md": concurrencyNotFasterMd,

	"for-range-novars.md": forRangeNovarsMd,

	"goroutine-leak.md": goroutineLeakMd,

	"mutex.md": mutexMd,

	"select-not-needed.md": selectNotNeededMd,

	"waitgroup-add-one.md": waitgroupAddOneMd,

	"waitgroup-not-needed.md": waitgroupNotNeededMd,

	"waitgroup-range-chan.md": waitgroupRangeChanMd,

	"waitgroup.md": waitgroupMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"buffer-size-len.md":            &bintree{bufferSizeLenMd, map[string]*bintree{}},
	"combine-maps-while-waiting.md": &bintree{combineMapsWhileWaitingMd, map[string]*bintree{}},
	"concurrency-not-faster.md":     &bintree{concurrencyNotFasterMd, map[string]*bintree{}},
	"for-range-novars.md":           &bintree{forRangeNovarsMd, map[string]*bintree{}},
	"goroutine-leak.md":             &bintree{goroutineLeakMd, map[string]*bintree{}},
	"mutex.md":                      &bintree{mutexMd, map[string]*bintree{}},
	"select-not-needed.md":          &bintree{selectNotNeededMd, map[string]*bintree{}},
	"waitgroup-add-one.md":          &bintree{waitgroupAddOneMd, map[string]*bintree{}},
	"waitgroup-not-needed.md":       &bintree{waitgroupNotNeededMd, map[string]*bintree{}},
	"waitgroup-range-chan.md":       &bintree{waitgroupRangeChanMd, map[string]*bintree{}},
	"waitgroup.md":                  &bintree{waitgroupMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
